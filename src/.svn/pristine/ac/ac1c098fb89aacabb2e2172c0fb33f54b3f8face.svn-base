/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package RobotVision;

import NARF.NarfDescriptor;
import SIFT.Feature;
import SIFT.FloatArray2DSIFT;
import SIFT.PointMatch;
import SIFT.SIFT;
import ASIFT.ASIFTDescriptor;
import Utils.Evaluation;
import Utils.Image;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;

/**
 *
 * @author Danna
 */
public class Main {

    public static double pcdMean(String pcdFile) throws Exception {
        FileInputStream fstream = null;
        double mean = 0;
        int points = 0;
        try {
            fstream = new FileInputStream(pcdFile);
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = br.readLine()) != null) {
                try {
                    String[] numbers = line.split(" ");
                    double x = Double.parseDouble(numbers[0]);
                    double y = Double.parseDouble(numbers[1]);
                    double z = Double.parseDouble(numbers[2]);
                    double t = Double.parseDouble(numbers[3]);
                    points++;
                    mean += z;
                } catch (NumberFormatException ex) {
                }
            }
        } finally {
            if (fstream != null) {
                fstream.close();
            }
        }

        return mean / points;
    }

    public static void pcdConcepts(String pcdDir) throws Exception {
        File folder = new File(pcdDir);
        File[] listOfFiles = folder.listFiles();

        for (int it = 0; it < listOfFiles.length; it++) {
            String pcdFile = listOfFiles[it].getName();
            double pcdMean = pcdMean(pcdFile);
            
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {

        CRFHTest crfh = new CRFHTest();
        crfh.computeCrfhFeatures("concepts\\conceptsTraining1.txt", "d:\\training3\\training3\\std_cam\\", "d:\\training3\\training3\\locations\\rgb.txt");

//        NARFTest narf = new NARFTest();
        //narf.computeNARFFeatures("D:\\Dana\\FACULTATE\\LICENTA\\training1\\pcd_files", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features");
        //       narf.train("narf_features\\", "concepts\\conceptsTraining1.txt", "d:\\training1\\training1\\locations\\depth.txt");

        //       NarfDescriptor.getDescriptor("D:\\Dana\\FACULTATE\\LICENTA\\training1\\pcd_files\\depth_1000.pcd", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1000.txt");
        //       NarfDescriptor.getDescriptor("D:\\Dana\\FACULTATE\\LICENTA\\training1\\pcd_files\\depth_1001.pcd", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1001.txt");

//        float val = NarfDescriptor.compareDescriptors("D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1001.txt", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1001.txt");
//        System.out.println("distance calculated: " + val);
//        

        //        Preprocessing.process("training1\\std_cam\\", "training1\\locations\\rgb.txt", "training1Images.txt", 0.08f);
//         CRFHTest crfh = new CRFHTest();

        //    Preprocessing.process("training2\\std_cam\\", "training2\\locations\\rgb.txt", "training2\\locations\\SelectedPreprocessedImages.txt", 0.08f);

        //     Image.splitIntoDirectories("d:\\Programming\\RobotVision\\training1\\std_cam\\", "d:\\Programming\\RobotVision\\training1\\std_repr\\", "d:\\Programming\\RobotVision\\training1\\locations\\SelectedImages2.txt");

//        ASIFTTest asift = new ASIFTTest();
//       Image.saveAsPNG(ImageIO.read(new File("d:\\Programming\\RobotVision\\testAsift\\rgb_10.jpg")), "d:\\Programming\\RobotVision\\testAsift\\rgb_10.png");
//        ASIFTDescriptor.getDescriptor("d:\\Programming\\RobotVision\\testAsift\\rgb_10.png", "d:\\Programming\\RobotVision\\testAsift\\rgb_10.asift");
//        asift.predict("D:\\Programming\\RobotVision\\testAsift\\", 
//                      "d:\\Programming\\RobotVision\\Image Sets\\training1\\repr_cam\\", 
//                      "D:\\Programming\\RobotVision\\Image Sets\\training1\\asift_features\\", 
//                      "d:\\Programming\\RobotVision\\concepts\\conceptsTraining1.txt");
        //      asift.transformImagesJpgToPng("D:\\Programming\\RobotVision\\training2\\std_cam\\", "D:\\Programming\\RobotVision\\training2\\png_cam\\");
        //     asift.computeASIFTFeatures("D:\\Programming\\RobotVision\\training2\\png_cam\\", "D:\\Programming\\RobotVision\\training2\\asift_features\\", "D:\\Programming\\RobotVision\\training2\\locations\\SelectedPreprocessedImages.txt");
//        for (int i = 0; i < 9; i++){
//     
//            System.out.println("Getting representative images for label " + i);
//           
//            asift.getRepresentativeImages("D:\\Programming\\RobotVision\\training1\\std_cam\\",
//                                      "D:\\Programming\\RobotVision\\training1\\repr_cam\\",
//                                      "D:\\Programming\\RobotVision\\training1\\asift_features\\", 
//                                      "d:\\Programming\\RobotVision\\concepts\\conceptsTraining1.txt", 
//                                      "D:\\Programming\\RobotVision\\training1\\locations\\SelectedImages.txt", 
//                                      "D:\\Programming\\RobotVision\\output ASIFT\\representativeImages.txt", i);
//        }



        //     asift.train("D:\\Programming\\RobotVision\\training1\\asift_features\\", "d:\\Programming\\RobotVision\\concepts\\conceptsTraining1.txt", "D:\\Programming\\RobotVision\\training1\\locations\\rgb.txt");
        //  

        //     asift.computeASIFTFeatures("D:\\Dana\\FACULTATE\\LICENTA\\training1\\png_cam\\", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\asift_features\\");


        //    narf.train("D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\", "concepts\\conceptsTraining1.txt", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\locations\\depth.txt");
//       narf.predict("testImages\\", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\", "concepts\\conceptsTraining1.txt", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\locations\\depth.txt", "output NARF\\predictedNARF.txt", 1);
        // Evaluation.evaluate("output NARF\\predictedNARF.txt", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\locations\\depth.txt");


        //       NarfDescriptor.getDescriptor("D:\\Dana\\FACULTATE\\LICENTA\\training1\\pcd_files\\depth_1000.pcd", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1000.txt");
        //       NarfDescriptor.getDescriptor("D:\\Dana\\FACULTATE\\LICENTA\\training1\\pcd_files\\depth_1001.pcd", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1001.txt");

//        float val = NarfDescriptor.compareDescriptors("D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1001.txt", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\narf_features\\depth_1001.txt");
//        System.out.println("distance calculated: " + val);
//        

        //        Preprocessing.process("training1\\std_cam\\", "training1\\locations\\rgb.txt", "training1Images.txt", 0.08f);
//        CRFHTest crfh = new CRFHTest();

        //        Preprocessing.process("training1\\std_cam\\", "training1\\locations\\rgb.txt", "training1Images.txt", 0.08f);
        //        CRFHTest crfh = new CRFHTest();
//         crfh.computeCrfhFeatures("concepts\\conceptsTraining1.txt", "training1\\std_cam\\", "training1Images.txt"); //D:\\Dana\\FACULTATE\\LICENTA\\training\\"); //, true);
//         crfh.train();
//         crfh.predict("training1\\std_cam\\", "concepts\\conceptsTraining1.txt", "predictedtest.txt", 1);
//         crfh.predict("D:\\Dana\\FACULTATE\\LICENTA\\training1\\std_cam\\", "concepts\\conceptsTraining1.txt", "predictedtest.txt", 1);

//         Evaluation.evaluate("predictedtestRun1.txt", "training1\\locations\\rgb.txt");

        //          SIFTTest sift = new SIFTTest();
        //     sift.computeSiftFeatures("concepts\\conceptsTraining1.txt", "D:\\Dana\\FACULTATE\\LICENTA\\training1\\std_cam\\", "testSiftsigma.txt"); 
        //          sift.train();
//           sift.predict("testSift\\", "concepts\\conceptsTraining1.txt", "predictedSift.txt", 1);
//            Evaluation.evaluate("predictedSift.txt", "training1\\locations\\rgb.txt");

        //     SIFTTest sift = new SIFTTest();
        //        sift.computeSiftFeatures("concepts\\conceptsTraining1.txt", "training1\\std_cam\\", "training1\\locations\\rgb.txt"); 
        //          sift.train();
        //          sift.predict("testSift\\", "concepts\\conceptsTraining1.txt", "predictedSift.txt", 1);
        //  Evaluation.evaluate("predictedSift.txt", "training1\\locations\\rgb.txt");

//           Vector< Feature > fs1;
//           Vector< Feature > fs2;
//           
//           BufferedImage img1 = ImageIO.read(new File("testSift\\rgb_139.jpg"));
//           BufferedImage img2 = ImageIO.read(new File("testSift\\rgb_139.jpg"));
//           
//           fs1 = SIFT.getFeatures(img1);
//           fs2 = SIFT.getFeatures(img2);
//           
//           Vector< PointMatch > candidates1 = SIFT.createMatches( fs1, fs2, 1.5f, null, Float.MAX_VALUE );
//           Vector< PointMatch > candidates2 = SIFT.createMatches( fs2, fs1, 1.5f, null, Float.MAX_VALUE );
//           
//           double val1 = (double)candidates1.size() / (double)fs1.size(); 
//           double val2 = (double)candidates2.size() / (double)fs2.size(); 
//           
//           double f = ( (double) 1 / (double) 2 ) * (val1 + val2);

//           Vector< Feature > fs1;
//           Vector< Feature > fs2;
//           
//           BufferedImage img1 = ImageIO.read(new File("testSift\\rgb_139.jpg"));
//           BufferedImage img2 = ImageIO.read(new File("testSift\\rgb_139.jpg"));
//           
//           fs1 = SIFT.getFeatures(img1);
//           fs2 = SIFT.getFeatures(img2);
//           
//           Vector< PointMatch > candidates1 = SIFT.createMatches( fs1, fs2, 1.5f, null, Float.MAX_VALUE );
//           Vector< PointMatch > candidates2 = SIFT.createMatches( fs2, fs1, 1.5f, null, Float.MAX_VALUE );
//           
//           double val1 = (double)candidates1.size() / (double)fs1.size(); 
//           double val2 = (double)candidates2.size() / (double)fs2.size(); 
//           
//           double f = ( (double) 1 / (double) 2 ) * (val1 + val2);
//           
    }
}
